<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BinHex4ExpectedMarkerAtBeginning" xml:space="preserve">
    <value>Expected BinHex 4.0 stream marker at the beginning of stream.</value>
  </data>
  <data name="BinHex4UnexpectedCharacter" xml:space="preserve">
    <value>Unexpected character '{0}' in BinHex 4.0 stream.</value>
    <comment>{0} substituted for character that caused the error.</comment>
  </data>
  <data name="BinHex4UnexpectedEndOfStream" xml:space="preserve">
    <value>Encountered unexpected end of stream in BinHex 4.0 stream.</value>
  </data>
  <data name="CrcParametersInitialValueOutOfRange" xml:space="preserve">
    <value>CRC initial value must fit within the provided bit width ({0} bits).</value>
    <comment>{0} substituted for the user-supplied bit width, "width" parameter.</comment>
  </data>
  <data name="CrcParametersNameNull" xml:space="preserve">
    <value>CRC name must not be null.</value>
  </data>
  <data name="CrcParametersOutputXorOutOfRange" xml:space="preserve">
    <value>CRC output XOR mask must fit within the provided bit width ({0} bits).</value>
    <comment>{0} substituted for the user-supplied bit width, "width" parameter.</comment>
  </data>
  <data name="CrcParametersPolynomialOutOfRange" xml:space="preserve">
    <value>CRC polynomial must fit within the provided bit width ({0} bits).</value>
    <comment>{0} substituted for the user-supplied bit width, "width" parameter.</comment>
  </data>
  <data name="CrcParametersWidthOutOfRange" xml:space="preserve">
    <value>CRC width must be between 8 and 64 bits, inclusive.</value>
  </data>
  <data name="DecodingStreamNotSupported" xml:space="preserve">
    <value>This operation is not supported within a DecodingStream.</value>
  </data>
  <data name="DecodingStreamNotSupportedUnreadableStream" xml:space="preserve">
    <value>DecodingStream class does not support unreadable Stream objects.</value>
  </data>
  <data name="DosDateTimeInvalidDosDateTimeOrder" xml:space="preserve">
    <value>Invalid DosDateTimeOrder value.</value>
  </data>
  <data name="DosDateTimeOutOfRangeMax" xml:space="preserve">
    <value>Cannot convert a DateTime later than {0:G} to DOS format.</value>
    <comment>{0:G} substituted for the maximum DOS date, 2107-12-31 23:59:58, in the local culture.</comment>
  </data>
  <data name="DosDateTimeOutOfRangeMin" xml:space="preserve">
    <value>Cannot convert a DateTime earlier than {0:G} to DOS format.</value>
    <comment>{0:G} substituted for the minimum DOS date, 1980-01-01 00:00:00, in the local culture.</comment>
  </data>
  <data name="HfsPlusDateTimeOutOfRangeMax" xml:space="preserve">
    <value>Cannot convert a DateTime later than {0:G} to HFS+ format.</value>
    <comment>{0:G} substituted for the maximum HFS+ date, 2040-02-06 06:28:15, in the local culture.</comment>
  </data>
  <data name="HfsPlusDateTimeOutOfRangeMin" xml:space="preserve">
    <value>Cannot convert a DateTime earlier than {0:G} to HFS+ format.</value>
    <comment>{0:G} substituted for the minimum HFS+ date, 1904-01-01 00:00:00, in the local culture.</comment>
  </data>
  <data name="Rle90EosExpectedRunLength" xml:space="preserve">
    <value>Expected run length in RLE90 stream, but encountered end of stream.</value>
  </data>
  <data name="Rle90RunBeforeLiteral" xml:space="preserve">
    <value>Encountered a run before buffering a literal byte in RLE90 stream.</value>
  </data>
</root>